훅 (hook) : 원래 존재하는 어떤 기능에 마치 갈고리를 거는 것 처럼 끼어 들어가 같이 수행되는 것
               리액트의 state와 생명주기 기능에 갈고리를 걸어 원하는 시점에 정해진 함수를 실행 하도록 만든 것 
훅의 이름은 모두 use로 시작 한다.

1. useState()  :  클래스컴포넌트에서는 클래스 안에 state를 초기화와 변경할 수 있는 setState 가 존재한다.
                    하지만, 함수형 컴포넌트에는 state를 제공하지 않기 때문에 useState() 훅을 사용한다.
                    함수형 컴포넌트에서 state 값이 변경되면 화면도 변경되게 해주는 훅
       
                   사용예) const [변수명, set변수명(첫글자대문자)] = useState(초기값);

 2. useEffect() : 리액트의 함수 컴포넌트에서 사이드 이펙트를 실행 할 수 있도록 해주는 훅
                    사이드 이펙트는 그냥 효과 혹은 영향을 뜻하는 Effect에 가깝다.
                    렌더링이 끝난 이후에 실행 되어야 하는 작업에 거는 훅

                    사용예) useEffect(이펙트함수, 의존성 배열);
                    ** 의존성 배열안에 있는 변수 중에 하나라도 값이 변경되었을 때 이펙스 함수 실행 
                   이펙트 함수는 처음 컴포넌트 가 렌더링 된 이후와 업데이트로 인한 재렌더링 이후에 실행
                   만약에 한번씩만 실행하고 싶으면 의존성 배열에 빈 배열을 넣으면 된다.
                   의존성배열을 생략하면 컴포넌트가 업데이트 될때마다 호출된다.

3. useMemo() : 의존성 배열에 들어 있는 변수가 변경할 경우에만 새로운 create 함수를 호출 하여 
                     결과값을 반환하며, 그렇지 않은 경우에는 기존 함수의 결과값을 그대로 반환
                     빠른 렌더링 속도를 얻기 위해서 그대로 사용
                     ** 랜더링이 일어나는 동안 실행된다. 
                    서버에서 데이터를 받아오거나 수동으로 DOM를 변경하는 작업등은 렌더링이 일어나는 동안 
                    실행 되어서는 안되므로 useMemo() 훅의 함수에 넣으면 안되고 useEffect() 훅에 사용해야 된다.

4. useCallback() : useMemo() 훅과 유사한 역할을 한다.
                       차이점은 값이 아닌 함수를 반환한다는 점이다.   
                       useCallback() 훅에서는 파라미터로 받는이 함수를 콜백이라고 부른다.
                      의존성 배열에 있는 변수 중 하나라도 변경되면 콜백함수를 반환한다.             

  4-1. 콜백함수가 자식 컴포넌트에 props로 전달되는 경우 
  4-2. 콜백함수가 의존성 배열에 있는 경우
  4-3. useEffect와 같이 사용해 컴포넌트 최적화 하는 경우

5. useRef() : 리액트에서 레퍼런스란 특정 컴포넌트에 접근할 수 있는 객체를 의미한다.
                레퍼런스 객체에는 .current 라는 속성이 있는데 현재 레퍼런스(참조)하고 있는 엘리먼트를 의미한다.

        사용예)  const 변수명 = useRef(초기값) ;

         useRef() 훅을 사용하면 파라미터로 들어온 초기값으로 초기화된 레퍼런스 객체를 반환한다.
         초기값이 null 이면 .current값이 null인 레퍼런스 객체가 반환
          쉽게 말해 useRef() 훅은 변경 가능한 .current라는속성을 가진 하나의 상자라고 생각하자.


 *** 훅의 규칙 ***
1. 무조건 최상위 레벨에서 훅을 호출해야 만 한다.
   컴포넌트가 레더링 될때 마다 매번 같은 순서로 호출 되어야 한다.
   
  function MyComponent(props){
    const [name, setName] = useState('hong');
               ...   
    if(name !== 'jong'){
         useEffect( () => {   .....    });
    }
        ..... 
 }

위 코드 경우 name이 jong이 입력되면 if문 하지 않으므로 올바른 훅 사용이 아니다.

2. 리액트 함수 컴포넌트에서만 훅을 호출해야 한다.
   일반적인 자바스크립트 하뭇에서는 훅을 호출 하면 안된다.





















